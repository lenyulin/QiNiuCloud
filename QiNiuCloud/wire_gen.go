// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"QiNiuCloud/QiNiuCloud/internal/repository"
	"QiNiuCloud/QiNiuCloud/internal/repository/cache"
	"QiNiuCloud/QiNiuCloud/internal/repository/dao"
	"QiNiuCloud/QiNiuCloud/internal/service"
	"QiNiuCloud/QiNiuCloud/internal/web"
	"QiNiuCloud/QiNiuCloud/ioc"
	"github.com/google/wire"
)

// Injectors from wire.go.bck:

func InitAPP() *App {
	loggerV1 := ioc.InitLogger()
	cmdable := ioc.InitRedis()
	interactiveCache := cache.NewInteractiveRedisCache(loggerV1, cmdable)
	interactiveRepository := repository.NewCachedInteractiveRepository(interactiveCache, loggerV1)
	interactiveService := service.NewInteractiveService(interactiveRepository)
	interactiveHandler := web.NewInteractiveHandler(interactiveService)
	client := ioc.NewHTTPClient()
	shrink := ioc.InitShrink(client, loggerV1)
	modelCache := cache.NewCache(cmdable, loggerV1)
	mongoClient := ioc.InitMongoDB()
	daoDAO := dao.NewMongoDBDAO(mongoClient, loggerV1)
	bloomFilter := ioc.InitBloomFilter(loggerV1)
	modelsRepository := repository.NewModelsRepository(loggerV1, modelCache, daoDAO, bloomFilter, interactiveCache)
	v20250513Client := ioc.InitHunYuan3D()
	providerSpecificGenerator := ioc.InitHunyuanTo3DProvider(loggerV1, v20250513Client)
	modelAPIsProviderManager := ioc.InitModelAPIsProviderManager(loggerV1, providerSpecificGenerator)
	syncModelGenerationTaskManager := ioc.InitNewSyncModelGenerationTaskManager(loggerV1, cmdable, modelAPIsProviderManager)
	modelsService := service.NewModelService(loggerV1, shrink, modelsRepository, syncModelGenerationTaskManager)
	modelsHandler := web.NewModelHandler(modelsService)
	engine := ioc.InitServer(interactiveHandler, modelsHandler)
	saramaClient := ioc.InitSaramaClient()
	syncProducer := ioc.InitSyncProducer(saramaClient)
	modelInfoInsertProducer := ioc.InitModelInfoInsertProducer(syncProducer)
	resultHelper := ioc.InitResultHelper(loggerV1, client, cmdable, modelInfoInsertProducer)
	v := ioc.InitConsumers(saramaClient, loggerV1, modelsService, resultHelper)
	app := &App{
		server:    engine,
		consumers: v,
	}
	return app
}

// wire.go.bck:

var thirdPartySet = wire.NewSet(ioc.InitMongoDB, ioc.InitSaramaClient, ioc.InitRedis, ioc.InitMultiOssManager, ioc.InitLogger, ioc.InitBloomFilter, ioc.NewHTTPClient, ioc.InitServer, ioc.InitConsumers, ioc.InitSyncProducer, ioc.InitSnowflake, ioc.InitHunYuan3D, ioc.InitResultHelper, ioc.InitNewSyncModelGenerationTaskManager, ioc.InitModelAPIsProviderManager, ioc.InitModelInfoInsertProducer, ioc.InitHunyuanTo3DProvider, ioc.InitModelProviderResultProducer, ioc.InitShrink)

var modelSet = wire.NewSet(web.NewModelHandler, service.NewModelService, repository.NewModelsRepository, dao.NewMongoDBDAO, cache.NewCache)

var interactiveSet = wire.NewSet(web.NewInteractiveHandler, service.NewInteractiveService, repository.NewCachedInteractiveRepository, cache.NewInteractiveRedisCache)
